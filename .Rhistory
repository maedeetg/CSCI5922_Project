# Training and testing data for entire dataset
set.seed(123)
train <- songs_0_1 %>% sample_n(floor(nrow(songs_0_1)*0.8), replace = FALSE)
test <- anti_join(songs_0_1, train, by = colnames(subset))
# Make early years and older years
early_years_train <- train %>% filter(year <= 1966)
early_years_test <- test %>% filter(year <= 1966)
older_years_train <- train %>% filter(year > 1966)
older_years_test <- test %>% filter(year > 1966)
# Export as csv to be used in python
write.csv(train, "train.csv", row.names = FALSE)
write.csv(test, "test.csv", row.names = FALSE)
write.csv(early_years_train, "early_train.csv", row.names = FALSE)
write.csv(early_years_test, "early_test.csv", row.names = FALSE)
write.csv(older_years_train, "older_train.csv", row.names = FALSE)
write.csv(older_years_test, "older_test.csv", row.names = FALSE)
min(songs_john_paul_norm)
min(songs_john_paul_norm$duration_ms)
max(songs_john_paul_norm$duration_ms)
View(songs_john_paul_norm)
# Load in libraries
library(dplyr)
# Read in data
songs <- read.csv("TheBeatlesSongs.csv")
songs <- songs %>% select(-mode)
songs_john_paul <- songs %>% filter(vocals == "John" | vocals == "Paul")
songs_john_paul <- songs_john_paul %>% mutate(across(c(liveness, valence), as.numeric))
# Make labels numeric, Paul = 1, John = 0
songs_0_1 <- songs_john_paul_norm %>% mutate(vocals = ifelse(songs_john_paul$vocals == "Paul", 1, 0))
# Normalize data
songs_john_paul_norm <- songs_john_paul %>% mutate(duration_ms = (duration_ms - min(duration_ms))/(max(duration_ms) - min(duration_ms)))
# Training and testing data for entire dataset
set.seed(123)
train <- songs_0_1 %>% sample_n(floor(nrow(songs_0_1)*0.8), replace = FALSE)
test <- anti_join(songs_0_1, train, by = colnames(subset))
# Make early years and older years
early_years_train <- train %>% filter(year <= 1966)
early_years_test <- test %>% filter(year <= 1966)
older_years_train <- train %>% filter(year > 1966)
older_years_test <- test %>% filter(year > 1966)
# Export as csv to be used in python
write.csv(train, "train.csv", row.names = FALSE)
write.csv(test, "test.csv", row.names = FALSE)
write.csv(early_years_train, "early_train.csv", row.names = FALSE)
write.csv(early_years_test, "early_test.csv", row.names = FALSE)
write.csv(older_years_train, "older_train.csv", row.names = FALSE)
write.csv(older_years_test, "older_test.csv", row.names = FALSE)
temp <- read.csv("train.csv")
temp
View(temp)
# Load in libraries
library(dplyr)
# Read in data
songs <- read.csv("TheBeatlesSongs.csv")
songs <- songs %>% select(-mode)
songs_john_paul <- songs %>% filter(vocals == "John" | vocals == "Paul")
songs_john_paul <- songs_john_paul %>% mutate(across(c(liveness, valence), as.numeric))
# Make labels numeric, Paul = 1, John = 0
songs_0_1 <- songs_john_paul_norm %>% mutate(vocals = ifelse(songs_john_paul$vocals == "Paul", 1, 0))
# Make labels numeric, Paul = 1, John = 0
songs_0_1 <- mutate(vocals = ifelse(songs_john_paul$vocals == "Paul", 1, 0))
# Normalize data
songs_john_paul_norm <- songs_john_paul %>% mutate(duration_ms = (duration_ms - min(duration_ms))/(max(duration_ms) - min(duration_ms)))
glimpse(songs_john_paul)
# Make labels numeric, Paul = 1, John = 0
songs_0_1 <- songs_john_paul %>% mutate(vocals = ifelse(songs_john_paul$vocals == "Paul", 1, 0))
# Normalize data
songs_john_paul_norm <- songs_john_paul %>% mutate(duration_ms = (duration_ms - min(duration_ms))/(max(duration_ms) - min(duration_ms)))
# Training and testing data for entire dataset
set.seed(123)
train <- songs_0_1 %>% sample_n(floor(nrow(songs_0_1)*0.8), replace = FALSE)
test <- anti_join(songs_0_1, train, by = colnames(subset))
# Make early years and older years
early_years_train <- train %>% filter(year <= 1966)
early_years_test <- test %>% filter(year <= 1966)
older_years_train <- train %>% filter(year > 1966)
older_years_test <- test %>% filter(year > 1966)
# Export as csv to be used in python
write.csv(train, "train.csv", row.names = FALSE)
write.csv(test, "test.csv", row.names = FALSE)
write.csv(early_years_train, "early_train.csv", row.names = FALSE)
write.csv(early_years_test, "early_test.csv", row.names = FALSE)
write.csv(older_years_train, "older_train.csv", row.names = FALSE)
write.csv(older_years_test, "older_test.csv", row.names = FALSE)
temp <- read.csv("train.csv")
glimpse(temp)
glimpse(train)
# Read in data
songs <- read.csv("TheBeatlesSongs.csv")
songs_john_paul <- songs %>% filter(vocals == "John" | vocals == "Paul")
View(songs_john_paul)
glimpse(songs)
write.csv(early_years_train, "early_train.csv", row.names = FALSE, fileEncoding = "UTF-8")
# Export as csv to be used in python
write.csv(train, "train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(test, "test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(early_years_train, "early_train.csv", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(early_years_test, "early_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_train, "older_train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_test, "older_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
# Load in libraries
library(dplyr)
# Read in data
songs <- read.csv("TheBeatlesSongs.csv")
songs_john_paul <- songs %>% filter(vocals == "John" | vocals == "Paul")
songs_john_paul <- songs_john_paul %>% mutate(across(c(liveness, valence), as.numeric))
# Make labels numeric, Paul = 1, John = 0
songs_0_1 <- songs_john_paul %>% mutate(vocals = ifelse(songs_john_paul$vocals == "Paul", 1, 0))
# Normalize data
songs_john_paul_norm <- songs_john_paul %>% mutate(duration_ms = (duration_ms - min(duration_ms))/(max(duration_ms) - min(duration_ms)))
# Training and testing data for entire dataset
set.seed(123)
train <- songs_0_1 %>% sample_n(floor(nrow(songs_0_1)*0.8), replace = FALSE)
test <- anti_join(songs_0_1, train, by = colnames(subset))
# Make early years and older years
early_years_train <- train %>% filter(year <= 1966)
early_years_test <- test %>% filter(year <= 1966)
older_years_train <- train %>% filter(year > 1966)
older_years_test <- test %>% filter(year > 1966)
# Export as csv to be used in python
write.csv(train, "train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(test, "test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(early_years_train, "early_train.csv", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(early_years_test, "early_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_train, "older_train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_test, "older_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
View(test)
# Load in libraries
library(dplyr)
# Read in data
songs <- read.csv("TheBeatlesSongs.csv")
songs_john_paul <- songs %>% filter(vocals == "John" | vocals == "Paul")
songs_john_paul <- songs_john_paul %>% mutate(across(c(liveness, valence), as.numeric))
# Make labels numeric, Paul = 1, John = 0
songs_0_1 <- songs_john_paul %>% mutate(vocals = ifelse(songs_john_paul$vocals == "Paul", 1, 0))
# Normalize data
songs_john_paul_norm <- songs_john_paul %>% mutate(duration_ms = (duration_ms - min(duration_ms))/(max(duration_ms) - min(duration_ms)))
View(songs_john_paul_norm)
View(songs)
# Load in libraries
library(dplyr)
# Read in data
songs <- read.csv("TheBeatlesSongs.csv")
songs_john_paul <- songs %>% filter(vocals == "John" | vocals == "Paul")
songs_john_paul <- songs_john_paul %>% mutate(across(c(liveness, valence), as.numeric))
# Make labels numeric, Paul = 1, John = 0
songs_0_1 <- songs_john_paul %>% mutate(vocals = ifelse(songs_john_paul$vocals == "Paul", 1, 0))
# Normalize data
songs_john_paul_norm <- songs_john_paul %>% mutate(duration_ms = (duration_ms - min(duration_ms))/(max(duration_ms) - min(duration_ms)))
# Training and testing data for entire dataset
set.seed(123)
train <- songs_0_1 %>% sample_n(floor(nrow(songs_0_1)*0.8), replace = FALSE)
test <- anti_join(songs_0_1, train, by = colnames(subset))
# Make early years and older years
early_years_train <- train %>% filter(year <= 1966)
early_years_test <- test %>% filter(year <= 1966)
older_years_train <- train %>% filter(year > 1966)
older_years_test <- test %>% filter(year > 1966)
# Export as csv to be used in python
write.csv(train, "train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(test, "test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(early_years_train, "early_train.csv", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(early_years_test, "early_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_train, "older_train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_test, "older_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
View(songs)
# Load in libraries
library(dplyr)
# Read in data
songs <- read.csv("TheBeatlesSongs.csv")
songs_john_paul <- songs %>% filter(vocals == "John" | vocals == "Paul")
songs_john_paul <- songs_john_paul %>% mutate(across(c(liveness, valence), as.numeric))
# Make labels numeric, Paul = 1, John = 0
songs_0_1 <- songs_john_paul %>% mutate(vocals = ifelse(songs_john_paul$vocals == "Paul", 1, 0))
# Normalize data
songs_john_paul_norm <- songs_john_paul %>% mutate(duration_ms = (duration_ms - min(duration_ms))/(max(duration_ms) - min(duration_ms)))
# Training and testing data for entire dataset
set.seed(123)
train <- songs_0_1 %>% sample_n(floor(nrow(songs_0_1)*0.8), replace = FALSE)
test <- anti_join(songs_0_1, train, by = colnames(subset))
# Make early years and older years
early_years_train <- train %>% filter(year <= 1966)
early_years_test <- test %>% filter(year <= 1966)
older_years_train <- train %>% filter(year > 1966)
older_years_test <- test %>% filter(year > 1966)
# Export as csv to be used in python
write.csv(train, "train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(test, "test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(early_years_train, "early_train.csv", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(early_years_test, "early_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_train, "older_train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_test, "older_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
View(songs)
# Load in libraries
library(dplyr)
# Read in data
songs <- read.csv("TheBeatlesSongs.csv")
songs_john_paul <- songs %>% filter(vocals == "John" | vocals == "Paul")
songs_john_paul <- songs_john_paul %>% mutate(across(c(liveness, valence), as.numeric))
# Make labels numeric, Paul = 1, John = 0
songs_0_1 <- songs_john_paul %>% mutate(vocals = ifelse(songs_john_paul$vocals == "Paul", 1, 0))
# Normalize data
songs_john_paul_norm <- songs_john_paul %>% mutate(duration_ms = (duration_ms - min(duration_ms))/(max(duration_ms) - min(duration_ms)))
# Training and testing data for entire dataset
set.seed(123)
train <- songs_0_1 %>% sample_n(floor(nrow(songs_0_1)*0.8), replace = FALSE)
test <- anti_join(songs_0_1, train, by = colnames(subset))
# Make early years and older years
early_years_train <- train %>% filter(year <= 1966)
early_years_test <- test %>% filter(year <= 1966)
older_years_train <- train %>% filter(year > 1966)
older_years_test <- test %>% filter(year > 1966)
View(songs)
# Load in libraries
library(dplyr)
# Read in data
songs <- read.csv("TheBeatlesSongs.csv")
songs_john_paul <- songs %>% filter(vocals == "John" | vocals == "Paul")
songs_john_paul <- songs_john_paul %>% mutate(across(c(liveness, valence), as.numeric))
# Make labels numeric, Paul = 1, John = 0
songs_0_1 <- songs_john_paul %>% mutate(vocals = ifelse(songs_john_paul$vocals == "Paul", 1, 0))
# Normalize data
songs_john_paul_norm <- songs_john_paul %>% mutate(duration_ms = (duration_ms - min(duration_ms))/(max(duration_ms) - min(duration_ms)))
# Training and testing data for entire dataset
set.seed(123)
train <- songs_0_1 %>% sample_n(floor(nrow(songs_0_1)*0.8), replace = FALSE)
test <- anti_join(songs_0_1, train, by = colnames(subset))
# Make early years and older years
early_years_train <- train %>% filter(year <= 1966)
early_years_test <- test %>% filter(year <= 1966)
older_years_train <- train %>% filter(year > 1966)
older_years_test <- test %>% filter(year > 1966)
# Export as csv to be used in python
write.csv(train, "train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(test, "test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(early_years_train, "early_train.csv", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(early_years_test, "early_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_train, "older_train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_test, "older_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
View(early_years_test)
View(early_years_train)
View(older_years_test)
View(older_years_train)
songs_john_paul <- songs_john_paul %>% select(-id, -year, -album, -song)
View(songs_john_paul)
# Normalize data
songs_john_paul_norm <- songs_john_paul %>% mutate(duration_ms = (duration_ms - min(duration_ms))/(max(duration_ms) - min(duration_ms)))
# Training and testing data for entire dataset
set.seed(123)
train <- songs_0_1 %>% sample_n(floor(nrow(songs_0_1)*0.8), replace = FALSE)
test <- anti_join(songs_0_1, train, by = colnames(subset))
# Make early years and older years
early_years_train <- train %>% filter(year <= 1966)
early_years_test <- test %>% filter(year <= 1966)
older_years_train <- train %>% filter(year > 1966)
older_years_test <- test %>% filter(year > 1966)
# Export as csv to be used in python
write.csv(train, "train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(test, "test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(early_years_train, "early_train.csv", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(early_years_test, "early_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_train, "older_train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_test, "older_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
# Load in libraries
library(dplyr)
# Read in data
songs <- read.csv("TheBeatlesSongs.csv")
songs_john_paul <- songs %>% filter(vocals == "John" | vocals == "Paul")
songs_john_paul <- songs_john_paul %>% mutate(across(c(liveness, valence), as.numeric))
songs_john_paul <- songs_john_paul %>% select(-id, -year, -album, -song)
# Make labels numeric, Paul = 1, John = 0
songs_0_1 <- songs_john_paul %>% mutate(vocals = ifelse(songs_john_paul$vocals == "Paul", 1, 0))
# Normalize data
songs_john_paul_norm <- songs_john_paul %>% mutate(duration_ms = (duration_ms - min(duration_ms))/(max(duration_ms) - min(duration_ms)))
# Training and testing data for entire dataset
set.seed(123)
train <- songs_0_1 %>% sample_n(floor(nrow(songs_0_1)*0.8), replace = FALSE)
test <- anti_join(songs_0_1, train, by = colnames(subset))
# Make early years and older years
early_years_train <- train %>% filter(year <= 1966)
# Load in libraries
library(dplyr)
# Read in data
songs <- read.csv("TheBeatlesSongs.csv")
songs_john_paul <- songs %>% filter(vocals == "John" | vocals == "Paul")
songs_john_paul <- songs_john_paul %>% mutate(across(c(liveness, valence), as.numeric))
# Make labels numeric, Paul = 1, John = 0
songs_0_1 <- songs_john_paul %>% mutate(vocals = ifelse(songs_john_paul$vocals == "Paul", 1, 0))
# Normalize data
songs_john_paul_norm <- songs_john_paul %>% mutate(duration_ms = (duration_ms - min(duration_ms))/(max(duration_ms) - min(duration_ms)))
# Training and testing data for entire dataset
set.seed(123)
train <- songs_0_1 %>% sample_n(floor(nrow(songs_0_1)*0.8), replace = FALSE)
test <- anti_join(songs_0_1, train, by = colnames(subset))
# Make early years and older years
early_years_train <- train %>% filter(year <= 1966)
early_years_test <- test %>% filter(year <= 1966)
older_years_train <- train %>% filter(year > 1966)
older_years_test <- test %>% filter(year > 1966)
# Export as csv to be used in python
write.csv(train, "train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(test, "test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(early_years_train, "early_train.csv", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(early_years_test, "early_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_train, "older_train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_test, "older_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
# Load in libraries
library(dplyr)
# Read in data
songs <- read.csv("TheBeatlesSongs.csv")
songs_john_paul <- songs %>% filter(vocals == "John" | vocals == "Paul")
songs_john_paul <- songs_john_paul %>% mutate(across(c(liveness, valence), as.numeric)) %>% select(-mode)
# Make labels numeric, Paul = 1, John = 0
songs_0_1 <- songs_john_paul %>% mutate(vocals = ifelse(songs_john_paul$vocals == "Paul", 1, 0))
# Normalize data
songs_john_paul_norm <- songs_john_paul %>% mutate(duration_ms = (duration_ms - min(duration_ms))/(max(duration_ms) - min(duration_ms)))
# Training and testing data for entire dataset
set.seed(123)
train <- songs_0_1 %>% sample_n(floor(nrow(songs_0_1)*0.8), replace = FALSE)
test <- anti_join(songs_0_1, train, by = colnames(subset))
# Make early years and older years
early_years_train <- train %>% filter(year <= 1966)
early_years_test <- test %>% filter(year <= 1966)
older_years_train <- train %>% filter(year > 1966)
older_years_test <- test %>% filter(year > 1966)
# Export as csv to be used in python
write.csv(train, "train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(test, "test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(early_years_train, "early_train.csv", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(early_years_test, "early_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_train, "older_train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_test, "older_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
# Load in libraries
library(dplyr)
# Read in data
songs <- read.csv("TheBeatlesSongs.csv")
songs_john_paul <- songs %>% filter(vocals == "John" | vocals == "Paul")
songs_john_paul <- songs_john_paul %>% mutate(across(c(liveness, valence), as.numeric)) %>% select(-mode)
# Make labels numeric, Paul = 1, John = 0
songs_0_1 <- songs_john_paul %>% mutate(vocals = ifelse(songs_john_paul$vocals == "Paul", 1, 0))
# Normalize data
songs_john_paul_norm <- songs_john_paul %>% mutate(duration_ms = (duration_ms - min(duration_ms))/(max(duration_ms) - min(duration_ms)))
# Training and testing data for entire dataset
set.seed(123)
train <- songs_0_1 %>% sample_n(floor(nrow(songs_0_1)*0.8), replace = FALSE)
test <- anti_join(songs_0_1, train, by = colnames(subset))
# Make early years and older years
early_years_train <- train %>% filter(year <= 1966)
early_years_test <- test %>% filter(year <= 1966)
older_years_train <- train %>% filter(year > 1966)
older_years_test <- test %>% filter(year > 1966)
# Export as csv to be used in python
write.csv(train, "train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(test, "test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(early_years_train, "early_train.csv", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(early_years_test, "early_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_train, "older_train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_test, "older_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
# Load in libraries
library(dplyr)
# Read in data
songs <- read.csv("TheBeatlesSongs.csv")
songs_john_paul <- songs %>% filter(vocals == "John" | vocals == "Paul")
songs_john_paul <- songs_john_paul %>% mutate(across(c(liveness, valence), as.numeric)) %>% select(-mode)
# Make labels numeric, Paul = 1, John = 0
songs_0_1 <- songs_john_paul %>% mutate(vocals = ifelse(songs_john_paul$vocals == "Paul", 1, 0))
# Normalize data
songs_john_paul_norm <- songs_john_paul %>% mutate(duration_ms = (duration_ms - min(duration_ms))/(max(duration_ms) - min(duration_ms)))
# Training and testing data for entire dataset
set.seed(123)
train <- songs_0_1 %>% sample_n(floor(nrow(songs_0_1)*0.8), replace = FALSE)
test <- anti_join(songs_0_1, train, by = colnames(subset))
# Make early years and older years
early_years_train <- train %>% filter(year <= 1966)
early_years_test <- test %>% filter(year <= 1966)
older_years_train <- train %>% filter(year > 1966)
older_years_test <- test %>% filter(year > 1966)
# Export as csv to be used in python
write.csv(train, "train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(test, "test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(early_years_train, "early_train.csv", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(early_years_test, "early_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_train, "older_train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_test, "older_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
library(tidyverse)
115/5
# k-fold CV
#set randomization seed
set.seed(100)
#generate list of folds
rand_fold <- rdunif(n=115,a=1,b=5)
rand_fold
songs_folds <- songs_john_paul_norm %>%
mutate(fold=rand_fold)
songs_folds
songs_folds %>%
group_by(fold) %>%
summarize(count=n()) %>%
ungroup()
training <- songs_folds %>%
filter(fold!=5) %>%
select(-fold)
# k-fold CV
#set randomization seed
set.seed(100)
#generate list of folds
rand_fold <- rdunif(n=115,a=1,b=10)
songs_folds <- songs_john_paul_norm %>%
mutate(fold=rand_fold)
songs_folds %>%
group_by(fold) %>%
summarize(count=n()) %>%
ungroup()
training <- songs_folds %>%
filter(fold!=5) %>%
select(-fold)
View(training)
# Load in libraries
library(dplyr)
library(tidyverse)
# Read in data
songs <- read.csv("TheBeatlesSongs.csv")
songs_john_paul <- songs %>% filter(vocals == "John" | vocals == "Paul")
songs_john_paul <- songs_john_paul %>% mutate(across(c(liveness, valence), as.numeric)) %>% select(-mode)
# Make labels numeric, Paul = 1, John = 0
songs_0_1 <- songs_john_paul %>% mutate(vocals = ifelse(songs_john_paul$vocals == "Paul", 1, 0))
# Normalize data
songs_john_paul_norm <- songs_john_paul %>% mutate(duration_ms = (duration_ms - min(duration_ms))/(max(duration_ms) - min(duration_ms)))
# Training and testing data for entire dataset
set.seed(123)
train <- songs_john_paul_norm %>% sample_n(floor(nrow(songs_john_paul_norm)*0.8), replace = FALSE)
test <- anti_join(songs_john_paul_norm, train, by = colnames(subset))
# Make early years and older years
early_years_train <- train %>% filter(year <= 1966)
early_years_test <- test %>% filter(year <= 1966)
older_years_train <- train %>% filter(year > 1966)
older_years_test <- test %>% filter(year > 1966)
# Export as csv to be used in python
write.csv(train, "train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(test, "test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(early_years_train, "early_train.csv", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(early_years_test, "early_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_train, "older_train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_test, "older_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
View(songs_0_1)
View(songs_john_paul_norm)
View(train)
View(training)
View(test)
View(songs)
# Load in libraries
library(dplyr)
library(tidyverse)
# Read in data
songs <- read.csv("TheBeatlesSongs.csv")
songs_john_paul <- songs %>% filter(vocals == "John" | vocals == "Paul")
songs_john_paul <- songs_john_paul %>% mutate(across(c(liveness, valence), as.numeric)) %>% select(-mode)
# Make labels numeric, Paul = 1, John = 0
songs_0_1 <- songs_john_paul %>% mutate(vocals = ifelse(songs_john_paul$vocals == "Paul", 1, 0))
# Normalize data
songs_john_paul_norm <- songs_0_1 %>% mutate(duration_ms = (duration_ms - min(duration_ms))/(max(duration_ms) - min(duration_ms)))
# Training and testing data for entire dataset
set.seed(123)
train <- songs_john_paul_norm %>% sample_n(floor(nrow(songs_john_paul_norm)*0.8), replace = FALSE)
test <- anti_join(songs_john_paul_norm, train, by = colnames(subset))
# Make early years and older years
early_years_train <- train %>% filter(year <= 1966)
early_years_test <- test %>% filter(year <= 1966)
older_years_train <- train %>% filter(year > 1966)
older_years_test <- test %>% filter(year > 1966)
# Export as csv to be used in python
write.csv(train, "train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(test, "test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(early_years_train, "early_train.csv", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(early_years_test, "early_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_train, "older_train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_test, "older_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
View(songs)
# Load in libraries
library(dplyr)
library(tidyverse)
# Read in data
songs <- read.csv("TheBeatlesSongs.csv")
songs_john_paul <- songs %>% filter(vocals == "John" | vocals == "Paul")
songs_john_paul <- songs_john_paul %>% mutate(across(c(liveness, valence), as.numeric)) %>% select(-mode)
# Make labels numeric, Paul = 1, John = 0
songs_0_1 <- songs_john_paul %>% mutate(vocals = ifelse(songs_john_paul$vocals == "Paul", 1, 0))
# Normalize data
#songs_john_paul_norm <- songs_0_1 %>% mutate(duration_ms = (duration_ms - min(duration_ms))/(max(duration_ms) - min(duration_ms)))
songs_john_paul_norm <- songs_0_1 %>% mutate(danceability = (danceability - mean(danceability))/sd(danceability),
energy = (energy - mean(energy))/sd(energy),
speechiness = (speechiness - mean(speechiness))/sd(speechiness),
acousticness = (acousticness - mean(acousticness))/sd(acousticness),
liveness = (liveness - mean(liveness))/sd(liveness),
valence = (valence - mean(valence))/sd(valence),
duration_ms = (duration_ms - mean(duration_ms))/sd(duration_ms))
# Training and testing data for entire dataset
set.seed(123)
train <- songs_john_paul_norm %>% sample_n(floor(nrow(songs_john_paul_norm)*0.8), replace = FALSE)
test <- anti_join(songs_john_paul_norm, train, by = colnames(subset))
# Make early years and older years
early_years_train <- train %>% filter(year <= 1966)
early_years_test <- test %>% filter(year <= 1966)
older_years_train <- train %>% filter(year > 1966)
older_years_test <- test %>% filter(year > 1966)
# Export as csv to be used in python
write.csv(train, "train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(test, "test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(early_years_train, "early_train.csv", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(early_years_test, "early_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_train, "older_train.csv", row.names = FALSE, fileEncoding = "UTF-8" )
write.csv(older_years_test, "older_test.csv", row.names = FALSE, fileEncoding = "UTF-8" )
